[{"/Users/wusiyi/Developer/react/react-app-ts/src/App.tsx":"1","/Users/wusiyi/Developer/react/react-app-ts/src/index.tsx":"2","/Users/wusiyi/Developer/react/react-app-ts/src/reportWebVitals.ts":"3","/Users/wusiyi/Developer/react/react-app-ts/src/pages/home/index.tsx":"4","/Users/wusiyi/Developer/react/react-app-ts/src/pages/about/index.tsx":"5","/Users/wusiyi/Developer/react/react-app-ts/src/layouts/index.tsx":"6"},{"size":555,"mtime":1610184860134,"results":"7","hashOfConfig":"8"},{"size":945,"mtime":1610186637178,"results":"9","hashOfConfig":"8"},{"size":425,"mtime":1610170728314,"results":"10","hashOfConfig":"8"},{"size":225,"mtime":1610182124473,"results":"11","hashOfConfig":"8"},{"size":71,"mtime":1610182413414,"results":"12","hashOfConfig":"8"},{"size":1516,"mtime":1610185826558,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fwkv5s",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"/Users/wusiyi/Developer/react/react-app-ts/src/App.tsx",[],"/Users/wusiyi/Developer/react/react-app-ts/src/index.tsx",[],"/Users/wusiyi/Developer/react/react-app-ts/src/reportWebVitals.ts",[],"/Users/wusiyi/Developer/react/react-app-ts/src/pages/home/index.tsx",[],"/Users/wusiyi/Developer/react/react-app-ts/src/pages/about/index.tsx",[],"/Users/wusiyi/Developer/react/react-app-ts/src/layouts/index.tsx",["27"],"import React from 'react';\nimport NProgress from 'nprogress';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n// import { connect } from 'dva';\n// import { ConnectState } from './../models/connect';\n// import styles from '../layouts/index.scss'\n// import './nprogress.less';\n\n\nNProgress.configure({ showSpinner: false });\n\nlet currHref = '';\nexport interface IBaseLayout {\n  loading: any;\n  [key: string]: any;\n}\nconst BaseLayout: React.FC<IBaseLayout> = props => {\n  const { children, loading, location: { pathname = '/' }, route: { routes }, } = props;\n  // TODO : 这里需要做路由鉴权\n  const { href } = window.location; // 浏览器地址栏中地址\n  if (currHref !== href) {\n    // currHref 和 href 不一致时说明进行了页面跳转\n    NProgress.start(); // 页面开始加载时调用 start 方法\n    if (!loading.global) {\n      // loading.global 为 false 时表示加载完毕\n      NProgress.done(); // 页面请求完毕时调用 done 方法\n      currHref = href; // 将新页面的 href 值赋值给 currHref\n    }\n  }\n  return (\n    <TransitionGroup>\n      <CSSTransition key={pathname} classNames=\"fade\" timeout={300}>\n        <div key={pathname} style={{ position: 'absolute', width: '100%', height: '100%' }}>\n          <div>\n            {children}\n          </div>\n        </div>\n      </CSSTransition>\n    </TransitionGroup>\n  );\n};\n\n// export default connect(({ loading }: ConnectState) => ({\n//   loading,\n// }))(BaseLayout);\nexport default BaseLayout;",{"ruleId":"28","severity":1,"message":"29","line":18,"column":69,"nodeType":"30","messageId":"31","endLine":18,"endColumn":75},"@typescript-eslint/no-unused-vars","'routes' is assigned a value but never used.","Identifier","unusedVar"]